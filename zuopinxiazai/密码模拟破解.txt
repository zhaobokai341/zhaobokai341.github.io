#作者：赵博凯
#语言：Python
from itertools import product
from time import sleep


# 破解失败或成功函数，判断当前密码是否与目标密码相同，如果相同则输出破解成功，否则输出破解失败
def 破解失败或成功():
    global 密码, 当前密码
    if 密码 == 当前密码:
        print("破解成功：", 当前密码)
        sleep(30)
        exit()
    else:
        print("破解失败：", 当前密码)


# 数字密码函数，根据给定的最短长度和最长长度，生成所有可能的数字密码，并调用破解失败或成功函数进行判断
def 数字密码(短, 长):
    global 当前密码, 大写字母, 数字
    for 当前密码长度 in range(短, 长 + 1):
        for 当前密码1 in product(''.join(数字), repeat=当前密码长度):
            当前密码 = ''.join(当前密码1)
            破解失败或成功()


# 大写字母密码函数，根据给定的最短长度和最长长度，生成所有可能的大写字母密码，并调用破解失败或成功函数进行判断
def 大写字母密码(短, 长):
    global 当前密码, 大写字母
    for 当前密码长度 in range(短, 长 + 1):
        for 当前密码1 in product(''.join(大写字母), repeat=当前密码长度):
            当前密码 = ''.join(当前密码1)
            破解失败或成功()


# 小写字母密码函数，根据给定的最短长度和最长长度，生成所有可能的小写字母密码，并调用破解失败或成功函数进行判断
def 小写字母密码(短, 长):
    global 当前密码, 小写字母
    for 当前密码长度 in range(短, 长 + 1):
        for 当前密码1 in product(''.join(小写字母), repeat=当前密码长度):
            当前密码 = ''.join(当前密码1)
            破解失败或成功()


# 字母密码函数，根据给定的最短长度和最长长度，生成所有可能的字母密码，并调用破解失败或成功函数进行判断
def 字母密码(短, 长):
    global 当前密码, 字母
    for 当前密码长度 in range(短, 长 + 1):
        for 当前密码1 in product(''.join(字母), repeat=当前密码长度):
            当前密码 = ''.join(当前密码1)
            破解失败或成功()


# 大写数字密码函数，根据给定的最短长度和最长长度，生成所有可能的大写数字密码，并调用破解失败或成功函数进行判断
def 大写数字(短, 长):
    global 当前密码, 数字大写
    for 当前密码长度 in range(短, 长 + 1):
        for 当前密码1 in product(''.join(数字大写), repeat=当前密码长度):
            当前密码 = ''.join(当前密码1)
            破解失败或成功()


# 小写数字密码函数，根据给定的最短长度和最长长度，生成所有可能的小写数字密码，并调用破解失败或成功函数进行判断
def 小写数字(短, 长):
    global 当前密码, 数字小写
    for 当前密码长度 in range(短, 长 + 1):
        for 当前密码1 in product(''.join(数字小写), repeat=当前密码长度):
            当前密码 = ''.join(当前密码1)
            破解失败或成功()


# 字母数字密码函数，根据给定的最短长度和最长长度，生成所有可能的字母数字密码，并调用破解失败或成功函数进行判断
def 字母数字(短, 长):
    global 当前密码, 数字字母
    for 当前密码长度 in range(短, 长 + 1):
        for 当前密码1 in product(''.join(数字字母), repeat=当前密码长度):
            当前密码 = ''.join(当前密码1)
            破解失败或成功()


# 字典破解函数，根据给定的字典文件，读取字典中的所有密码，并调用破解失败或成功函数进行判断
def 字典破解(文件):
    global 当前密码
    with open(文件, 'r', encoding="utf-8") as 字典:
        列表 = 字典.read()
    列表 = 列表.split("\n")
    for 当前密码 in 列表:
        破解失败或成功()


# 主函数，根据用户输入的密码破解方式，调用相应的密码破解函数
def main():
    if 密码破解方式 == '1':
        数字密码(最短长度, 最长长度)
    elif 密码破解方式 == '2':
        大写字母密码(最短长度, 最长长度)
    elif 密码破解方式 == '3':
        小写字母密码(最短长度, 最长长度)
    elif 密码破解方式 == '23':
        字母密码(最短长度, 最长长度)
    elif 密码破解方式 == '12':
        大写数字(最短长度, 最长长度)
    elif 密码破解方式 == '13':
        小写数字(最短长度, 最长长度)
    elif 密码破解方式 == '123':
        字母数字(最短长度, 最长长度)
    elif 密码破解方式 == '4':
        字典 = input("破解哪个？")
        字典破解(字典)
    else:
        print("输入有误")


if __name__ == '__main__':
    当前密码 = ""
    数字 = [str(i) for i in range(0, 10)]
    大写字母 = [chr(i) for i in range(65, 91)]
    小写字母 = [chr(i) for i in range(97, 123)]
    字母 = 小写字母 + 大写字母
    数字大写 = 数字 + 大写字母
    数字小写 = 数字 + 小写字母
    数字字母 = 数字 + 字母
    print("1:", 数字)
    print("2:", 大写字母)
    print("3:", 小写字母)
    print("23:", 字母)
    print("12:", 数字大写)
    print("13:", 数字小写)
    print("123:", 数字字母)
    print("4:字典破解")
    密码破解方式 = input("请输入密码破解方式：")
    密码 = input("请输入要破解的密码：")
    if 密码破解方式 != "4":
        最短长度 = int(input("请输入破解最短长度："))
        最长长度 = int(input("请输入破解最长长度："))
    破解失败或成功()
    main()

